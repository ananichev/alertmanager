// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\xff\x6f\xdb\xb6\xb3\xbf\xeb\xaf\xb8\x69\x78\x58\x03\xd8\x96\xd3\x6e\xc5\xea\xd8\x79\x70\x1d\xa5\x11\x9e\x63\x07\xb6\xd2\xae\x18\x86\x80\x96\xce\x36\x5b\x89\xd4\x48\x3a\x89\x97\xf9\x7f\x7f\x20\x25\x7f\x91\x2d\x27\x4e\xd1\x25\xfe\x7c\x96\x04\x6d\x24\xea\xbe\xdf\xf1\xee\x28\x52\x77\x77\x10\xe2\x90\x32\x04\xfb\xea\x8a\x44\x28\x54\x4c\x18\x19\xa1\xb0\x61\x36\x6b\xea\xfb\xf3\xf4\xfe\xee\x0e\x90\x85\x30\x9b\x59\x5b\x51\x2e\x7b\x6d\x8d\x75\x77\x07\x15\xf7\x56\xa1\x60\x24\xba\xec\xb5\x61\x36\x73\x7e\x74\x0c\x9c\xfc\x5f\x81\x01\xd2\x6b\x14\x0d\x0d\xd4\xcb\x6e\x52\x9c\x8c\x7a\x9e\xbc\x9c\x0c\xbe\x60\xa0\x34\xd9\xdf\x35\x4a\x5f\x11\x35\x91\xf0\x37\x28\x7e\x99\x24\x73\x54\x3a\x04\xfc\x73\xf1\xd0\x1e\x52\x41\xd9\x48\xe3\xd4\x34\x8e\xd1\x42\x56\x4e\xcd\x28\xfc\x0d\x11\xb2\x55\x8e\x7f\x80\x06\xfa\x20\xf8\x24\x69\x93\x01\x46\xb2\xd2\xe7\x42\x61\x78\x41\xa8\x90\x95\x8f\x24\x9a\xa0\x66\xf8\x85\x53\x06\x36\x68\xaa\x90\xb2\x1c\x29\x78\xa5\x69\x55\x5a\x3c\x8e\x39\x4b\x91\x0f\xb2\xb1\x15\x7a\x07\x30\x9b\xbd\xba\xbb\x83\x1b\xaa\xc6\x79\xe0\x4a\x0f\x63\x7e\x8d\x79\xee\x1d\x12\xa3\xcc\xcc\x58\xc4\x7d\x21\xf8\xc1\xe2\x6a\x8b\x6f\x42\x94\x81\xa0\x89\xa2\x9c\xd9\xf7\xd8\x58\xe1\xad\x4a\xfd\x78\x15\x51\xa9\x32\x50\x41\xd8\x08\xa1\x02\xb3\x59\x2a\x57\xcd\x5a\x0e\x6e\xda\x49\x5b\xa5\x6c\x0c\xa9\xc5\xd7\x77\x0d\x58\x28\x90\x09\x96\x32\x6f\x32\xc6\x15\xd1\x32\xe5\x48\xae\x0c\x7f\x1b\xdd\x3e\x9f\x88\x00\x6b\xa9\x33\x91\xa1\x20\x8a\x8b\x34\xfc\xac\x02\x43\xe5\x6c\x20\x23\x12\x7c\xad\x84\x38\x24\x93\x48\x55\x14\x55\x11\x66\x56\x50\x18\x27\x11\x51\xf9\x58\xac\x6c\x33\x79\x9e\xce\x44\xea\x29\x10\x17\x91\xca\x4f\xb4\x1d\xe9\x0d\x49\x14\x0d\x48\xf0\x75\x83\x5e\xa1\xf8\x9a\x28\xfc\x0d\x0f\x01\x46\x94\x7d\xdd\x59\x82\x44\xa0\x0e\x16\x7b\x37\xe8\x15\xfa\xf7\x1a\xc0\xa4\x8d\x1d\x25\xa0\x01\x67\x18\xf3\x2f\x74\x47\x19\x34\xfc\x44\x44\xbb\x4a\xbc\xbb\x72\x43\xce\x55\x9a\x24\xb7\xc4\xd4\x98\x26\xc1\x98\xa8\x25\x82\xe0\xf1\xb7\x47\xc2\x3a\xb5\x18\xa5\x24\xa3\x47\x44\xe9\x2a\xb1\x1b\x1c\xe0\x6d\x91\xd2\x8f\xa4\x93\x68\xa1\xc3\x89\x9a\x2e\x68\x6d\x66\x9c\xc7\x4d\xa0\x4d\x8a\x41\x44\x91\x15\xc9\xb7\xa3\xe1\xb6\x51\x5c\xd6\xaa\x6f\x0b\xcb\x4d\xba\x94\x49\x45\x58\x80\xb2\x80\xee\x46\x8a\xad\x6c\x0f\x1c\x9e\xc8\x11\x32\x8a\xdf\xee\xeb\xfb\x88\x6d\x7a\x28\xab\x48\x5b\x12\x70\x61\x09\xb2\xd6\x0a\x60\xae\xc2\x1e\x40\x15\xca\xb3\x99\x95\x0e\x42\x3a\x68\x52\xfd\xfd\x16\xc9\x97\x69\xc3\xa4\xbc\xa2\x51\x01\xbf\x1e\x4a\x1e\x5d\x63\xb8\xc6\x71\x3e\xbc\x3b\xcf\x39\xc6\x06\xd7\xf2\x2e\x26\x95\xa6\xf2\x3c\x3e\x9a\xd6\xe6\xe4\xb7\xcc\x6f\xeb\xc5\x7f\xf7\xf8\xaf\xb9\x6a\x7f\x11\x6d\xd0\x2b\xf4\xcf\x16\xaf\xaf\xf9\x87\x24\xf4\x4a\x62\x20\x70\x7b\xbd\x58\xc3\x50\xfc\x4a\x37\x04\x8f\x00\x4f\x88\x50\xd3\x47\xc0\x2b\x32\xda\x15\x9a\x8c\x90\xa9\x2b\x1a\xae\xd7\xaf\x55\x94\x6b\x1a\x28\x2e\x78\x22\x97\x81\xae\x88\xc2\xab\x7c\x68\xbe\x44\xdf\xe3\xb2\xc7\xa6\x55\x91\x29\xaa\xa6\x57\x21\x95\x49\x44\xa6\x57\x5b\x3a\xc6\x87\x53\xfd\x26\xe5\x98\x33\xaa\xb8\x36\xc8\x95\xe2\x3c\x7a\x64\x11\x5d\xa5\x8d\x31\xa1\xd1\x32\x0e\x96\x8b\xb2\x47\x4b\x99\xa7\x34\x56\xb1\x11\xcb\xaa\xff\x70\xd2\x6d\xf9\x9f\x2f\x5c\xd0\x43\x70\x71\xf9\xbe\xed\xb5\xc0\x2e\x3b\xce\xa7\x37\x2d\xc7\x39\xf1\x4f\xe0\xb7\x33\xff\xbc\x0d\x87\x95\x2a\xf8\x82\x30\x49\x75\xb0\x91\xc8\x71\xdc\x8e\x0d\xf6\x58\xa9\xa4\xe6\x38\x37\x37\x37\x95\x9b\x37\x15\x2e\x46\x8e\xdf\x73\x6e\x35\xad\x43\x8d\x9c\x5d\x96\xd5\x0a\x66\x25\x54\xa1\x7d\x6c\xd5\x7f\x28\x97\xad\xbe\x9a\x46\x08\x84\x85\x60\x98\x84\x28\xa8\x76\xa8\xee\xd9\x40\x93\x96\x35\xc7\x19\x51\x35\x9e\x0c\x2a\x01\x8f\x1d\xad\xc3\x68\xc2\x1c\x43\x8e\x04\x29\xbd\xb2\x51\xad\x3c\x37\x87\xb4\x2c\xcb\x1f\x23\x9c\x7b\x3e\xb4\x69\x80\x4c\x22\xbc\x3a\xf7\xfc\x03\xcb\x6a\xf1\x64\x2a\xe8\x68\xac\xe0\x55\x70\x00\xaf\xab\x87\x3f\xc3\x79\x4a\xd1\xb2\x2e\x50\xc4\x54\x4a\xca\x19\x50\x09\x63\x14\x38\x98\xc2\x48\x10\xa6\x30\x2c\xc1\x50\x20\x02\x1f\x42\x30\x26\x62\x84\x25\x50\x1c\x08\x9b\x42\x82\x42\x72\x06\x7c\xa0\x08\x65\x3a\xfe\x09\x04\x3c\x99\x5a\x7c\x08\x6a\x4c\x25\x48\x3e\x54\x37\x44\xa4\x1a\x12\x29\x79\x40\x89\xc2\x10\x42\x1e\x4c\x62\x64\xe9\xc4\x85\x21\x8d\x50\xc2\x2b\x35\x46\xb0\xfb\x19\x86\x7d\x60\x98\x84\x48\x22\x8b\x32\xd0\xcf\xe6\x8f\xcc\x7a\x96\x4f\x14\x08\x94\x4a\x50\x63\x85\x12\x50\x16\x44\x93\x50\xcb\x30\x7f\x1c\xd1\x98\x66\x1c\x34\xba\x51\x5c\x5a\x8a\xc3\x44\x62\xc9\xc8\x59\x82\x98\x87\x74\xa8\xff\xa2\x51\x2b\x99\x0c\x22\x2a\xc7\x25\x08\xa9\x26\x3d\x98\x28\x2c\x81\xd4\x83\xc6\x8e\x25\xad\x87\xc3\x05\x48\x8c\x22\x2b\xe0\x09\x45\x09\x46\xd7\xa5\x74\x06\x46\x8b\x9e\x68\x83\xaa\xcc\x44\x52\x8f\xdc\x8c\x79\x9c\xd7\x84\x4a\x6b\x38\x11\x8c\xca\x31\x1a\x9c\x90\x83\xe4\x86\xa3\x8e\x66\x3d\xa2\xc1\x87\x3c\x8a\xf8\x8d\x56\x2d\xe0\x2c\xa4\xd9\x12\xd6\x38\x99\x0c\xf4\x32\x3e\x58\xf8\x95\x71\x45\x83\xd4\xdc\xc6\x01\xc9\xd2\xab\xd9\x23\x39\x26\x51\x04\x03\xcc\x0c\x86\x21\x50\x06\x64\x45\x1d\xa1\xd9\xeb\x8e\x52\x51\x12\x41\xc2\x85\xe1\xb7\xae\x66\xc5\xb2\xfc\x33\x17\xfa\xdd\x53\xff\x53\xb3\xe7\x82\xd7\x87\x8b\x5e\xf7\xa3\x77\xe2\x9e\x80\xdd\xec\x83\xd7\xb7\x4b\xf0\xc9\xf3\xcf\xba\x97\x3e\x7c\x6a\xf6\x7a\xcd\x8e\xff\x19\xba\xa7\xd0\xec\x7c\x86\xff\xf3\x3a\x27\x25\x70\x7f\xbb\xe8\xb9\xfd\x3e\x74\x7b\x96\x77\x7e\xd1\xf6\xdc\x93\x12\x78\x9d\x56\xfb\xf2\xc4\xeb\x7c\x80\xf7\x97\x3e\x74\xba\x3e\xb4\xbd\x73\xcf\x77\x4f\xc0\xef\x82\x66\x98\x91\xf2\xdc\xbe\x26\x76\xee\xf6\x5a\x67\xcd\x8e\xdf\x7c\xef\xb5\x3d\xff\x73\xc9\x3a\xf5\xfc\x8e\xa6\x79\xda\xed\x41\x13\x2e\x9a\x3d\xdf\x6b\x5d\xb6\x9b\x3d\xb8\xb8\xec\x5d\x74\xfb\x2e\x34\x3b\x27\xd0\xe9\x76\xbc\xce\x69\xcf\xeb\x7c\x70\xcf\xdd\x8e\x5f\x01\xaf\x03\x9d\x2e\xb8\x1f\xdd\x8e\x0f\xfd\xb3\x66\xbb\xad\x59\x59\xcd\x4b\xff\xac\xdb\xd3\xf2\x41\xab\x7b\xf1\xb9\xe7\x7d\x38\xf3\xe1\xac\xdb\x3e\x71\x7b\x7d\x78\xef\x42\xdb\x6b\xbe\x6f\xbb\x29\xab\xce\x67\x68\xb5\x9b\xde\x79\x09\x4e\x9a\xe7\xcd\x0f\xae\xc1\xea\xfa\x67\x6e\xcf\xd2\x60\xa9\x74\xf0\xe9\xcc\xd5\x43\x9a\x5f\xb3\x03\xcd\x96\xef\x75\x3b\x5a\x8d\x56\xb7\xe3\xf7\x9a\x2d\xbf\x04\x7e\xb7\xe7\x2f\x50\x3f\x79\x7d\xb7\x04\xcd\x9e\xd7\xd7\x06\x39\xed\x75\xcf\x4b\x96\x36\x67\xf7\x54\x83\x78\x1d\x8d\xd7\x71\x53\x2a\xda\xd4\x90\xf3\x48\xb7\x67\xee\x2f\xfb\xee\x82\x20\x9c\xb8\xcd\xb6\xd7\xf9\xd0\xd7\xc8\x5a\xc5\x39\x70\xc5\x2a\x97\x8f\xad\xba\x49\x81\xb7\x71\xc4\x64\xa3\x20\xb1\x1d\xbe\x7b\xf7\x2e\xcd\x67\xf6\x6e\x40\x52\x27\xb7\x86\x3d\xe4\x4c\x95\x87\x24\xa6\xd1\xb4\x06\x3f\x9d\x61\x74\x8d\x8a\x06\x04\x3a\x38\xc1\x9f\x4a\xb0\x18\x28\x41\x53\x50\x12\x95\x40\x12\x26\xcb\x12\x05\x1d\x1e\xc1\x80\xdf\x96\x25\xfd\x4b\xd7\x62\x18\x70\x11\xa2\x28\x0f\xf8\xed\x11\x18\xa2\x92\xfe\x85\x35\x38\xfc\x39\xb9\x3d\x82\x98\x88\x11\x65\x35\xa8\x1e\xe9\xdc\x3a\x46\x12\x3e\x27\xff\x18\x15\x01\x5d\x51\x1b\xf6\x35\xc5\x1b\x3d\x8b\x6c\x3d\x7b\x15\x32\xd5\xb0\x6f\x68\xa8\xc6\x8d\x10\xaf\x69\x80\x65\x73\xf3\x7c\xc6\x02\x67\x2e\xae\x76\x66\x19\xff\x9c\xd0\xeb\x86\xdd\x4a\x45\x2d\xfb\xd3\x04\x57\x04\xd7\xad\x88\xa3\x9d\x7b\x64\x2a\x81\x44\xd5\xb8\xf4\x4f\xcb\xbf\x3e\xb3\xf8\xe6\x85\xcf\xf3\xb9\xfb\xbe\x5e\xa4\xee\x18\xe1\x8e\x2d\xab\xee\xe8\xa0\xd4\x17\x03\x1e\x4e\x81\x2a\x8c\x65\xc0\x13\x6c\xd8\xb6\xb9\x51\x53\x7d\x9d\xcd\x28\x19\x8c\x31\x26\x66\x46\xb9\xba\xba\x9f\xcf\x7b\xdf\x27\x55\xb2\x7c\x83\x83\xaf\x54\x95\xd3\x07\x31\xe7\x6a\x6c\x90\xd2\xda\x40\x89\xc4\x70\x09\xa4\x63\xc3\x60\x97\x49\xf8\x65\x22\x55\x0d\x18\x67\x78\x04\x63\xd4\x95\xa9\x06\x87\xd5\xea\xff\x1c\x41\x44\x19\x96\x17\x43\x95\xb7\x18\x1f\x81\x99\x01\x29\x00\xfc\x40\x63\x3d\x59\x08\x53\x47\x30\x20\xc1\xd7\x91\xe0\x13\x16\x96\x03\x1e\x71\x51\x83\x1f\x87\x6f\xf5\xef\xaa\xf9\x21\x21\x61\x68\xa4\xd2\xd1\x30\x18\x19\xc8\x86\x9d\x41\xda\xda\xde\x8a\x0c\x9e\x3a\x3c\x56\x54\xda\x51\x8f\x42\xd9\x01\xea\x4a\x3c\x63\x1e\x03\xd0\x12\x3c\x71\x26\xbd\x46\xa1\x89\x44\x65\x12\xd1\x11\xab\x81\xe2\x49\xde\x50\xd7\xe6\x41\xc3\x56\x3c\xb1\x8f\xeb\x8e\x0a\x97\x82\xa6\x99\xd5\x7e\x5b\xad\x3e\xf1\x54\x29\x14\x3a\x5b\x5a\xd5\x60\x10\xf1\xe0\x6b\x2e\xb6\x63\x72\x5b\xce\x82\xe4\x6d\xb5\x9a\xdc\xe6\x1e\x06\x11\x12\xa1\x19\xaa\x71\x6e\x7c\xdb\x44\x59\x18\x07\xc8\x44\xf1\xb5\x29\x91\xb3\x96\x31\x14\x40\x3d\xa4\xd7\x4f\x1d\x56\x79\x7d\xd7\x8d\x73\xbf\x12\x73\xb9\xb5\x93\xcd\x64\xce\xfc\xac\x2d\x61\x43\x80\x51\x94\x41\x37\xec\x6a\x7a\x2f\x13\x12\xcc\xef\x9f\x54\xd1\xec\xa1\x20\x21\x9d\xc8\x1a\xbc\x31\x63\x05\x09\x60\x38\xcc\x65\xb1\x14\xad\x06\x87\xc9\x2d\x48\x1e\xd1\x10\x7e\xc4\x77\xfa\x37\x9f\x18\x86\xc3\x15\x5b\xec\x43\x76\x58\x4a\xf2\x74\x59\xe2\xed\xd6\x09\x97\xb3\xae\x41\xb9\xc9\x4a\xcd\x2f\xd5\xea\x11\x98\x12\x95\xc1\x07\xc8\x14\x8a\x22\x7f\x99\x7f\x55\xe3\x94\x4d\xbf\xb9\x6f\x7f\x79\xfd\xba\x55\x5c\x80\x5e\xeb\xb8\xb6\x21\x9b\x6f\x29\x83\x55\xef\xa5\xb8\xc5\x33\x72\xfe\xb3\xdc\x37\x5e\x6c\x18\x83\x79\x59\x52\xf8\x2e\xe9\x00\x0e\x61\x36\x93\x8b\x17\x1e\x30\xe4\x02\x96\x7b\x9b\x5b\xf6\x96\x61\x36\x5b\xe3\x0a\xab\x3b\x9d\x8d\xdc\x3e\xe7\x06\x58\xf6\x6a\x25\xe7\xfc\x45\x0e\x5e\xdc\x8b\x97\x30\xdd\xa5\x98\x2d\x83\xe7\x30\x0d\x9e\xfb\x62\x63\xef\x73\xdf\x56\xb3\xef\x57\x10\xec\x7b\x28\x54\xa1\x3a\xcf\x25\xf7\x85\x43\xa6\x06\x81\xb1\xc0\x61\xc3\xde\x65\x8f\xe1\x89\xe3\x61\x9e\x34\x4f\x4f\x4f\xb3\xe4\x1b\x62\xc0\x85\x79\x27\x37\x5f\x1e\xe4\x16\x04\xaf\xf5\x72\x20\x97\xb7\x07\x3c\x0a\x8b\x13\x77\x30\x11\x52\x53\x4f\x38\x4d\x07\x16\x0d\x05\x65\x86\x68\xd6\x57\xac\x25\xf8\x5f\xb4\x60\x86\x9e\x79\x89\x3a\xe4\x22\xae\x41\x40\x12\xaa\x48\x44\xff\xc2\xc2\xa4\xff\xe6\xe7\x5f\x31\x24\x05\xf5\x7a\x03\x22\x1b\x36\x56\xae\xa5\x85\x7c\x31\xb8\xe8\xde\x92\xdb\xcc\xbd\xc7\x1f\x29\xde\x00\x65\xf0\xe0\xdb\xf1\xba\x43\x0a\x63\x78\x2d\xf1\x16\xa7\xdf\xf4\xe7\xa1\xcd\x8f\x82\xa2\xf0\x32\x65\xff\x99\x29\x2b\x95\xe0\x6c\xf4\x7c\xa6\xfd\x7d\xfb\xe9\xb4\x3f\xb2\x9d\xaf\xba\x93\x0a\xf9\x1d\xa2\xae\xa0\x61\xc8\x9e\xcc\x8f\x60\xad\x6f\xa1\xbd\xc4\xe1\xbf\x23\x0e\xd3\xd6\x74\x11\x6a\xf5\xc1\xf3\xb9\x19\x9c\x62\x1b\x3d\x70\xf6\x70\xfb\x01\xc1\x67\x56\x66\xfb\xbc\x83\x82\x5a\xb0\xdc\x44\x4f\x2b\xc1\xb3\x47\xc6\x8a\x44\xfb\x12\x1e\x0f\x5a\xf4\xc1\x03\xa5\xff\xa1\xc1\xb2\xda\x61\xae\x9f\x70\x7d\xa6\x86\x72\xde\x6e\x6d\xf4\x94\x13\x16\xa2\xd0\xdd\x5f\x3e\x9c\xd2\x33\xba\xba\x89\xda\xbf\x1c\xf3\x6d\xd5\x74\xc7\xf6\x6e\xf5\xac\x49\xa1\x7b\x5f\xba\xc2\xbd\xa9\xc6\x7b\x17\x99\x00\xf5\xf1\x1e\xca\xb4\x77\x76\x7a\xcc\x0c\xbe\xaf\x23\x7e\x99\x58\xff\x9d\x6d\xee\xea\x72\x6b\x71\x66\x6f\xb9\xe0\x9a\x0f\x3d\xc3\x92\x6b\xf5\x04\xe1\x4b\x34\xfe\x3b\xa2\xf1\x65\xd1\xf5\xb2\xe8\x7a\x59\x74\xed\x7b\xb0\xbc\x2c\xba\xf6\xa6\x65\xdb\xe6\xa8\xba\x63\xf6\xe3\x8e\x1f\xb1\x15\xba\x40\x59\x8e\x3c\xf9\x49\x8c\xdc\xd1\xa4\x95\x93\x26\x4b\x47\xbf\x7b\xf7\xee\xbe\x0d\xee\xfc\xce\xee\xe6\x96\xe4\x7e\x34\x0d\xfb\xd4\xbe\x3c\x65\xeb\xf2\x7a\x6b\xeb\x52\xb8\x89\xf6\x90\xcb\x57\x7a\x9b\xb5\x73\x0d\xf9\x53\x58\xab\xe9\x2a\xff\x0d\xfe\xd3\x05\xc4\xeb\xd5\x6c\x65\x34\xda\x39\x55\x21\x53\x30\x98\xee\xb6\x0f\xb7\x99\x3b\x36\xce\x3b\xac\x67\x86\xba\x13\xd2\xeb\xe3\xf4\x7f\x2b\x9f\x26\xf6\xad\xad\xdd\x72\xbc\x2e\x55\x71\x99\xbf\xea\xce\x80\x87\x53\x3d\x32\x56\x71\x74\x6c\x59\x5b\xbe\xd4\x9d\xc8\x31\xbf\x46\xf1\x1d\xbe\x71\xdf\x20\xf5\xcf\x7f\x0f\xf6\x7d\x3e\x07\xdb\xfd\x6b\xb0\xef\xf7\x31\xd8\x0a\xcf\x1d\x2c\xb9\xfc\x50\xfd\x11\x5f\x91\xfe\x7f\x00\x00\x00\xff\xff\x05\x69\xc3\x01\xc1\x43\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17345, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
